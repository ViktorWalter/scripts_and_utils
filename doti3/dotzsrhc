# zmodload zsh/zprof
# set -x
# export EDITOR="/usr/bin/vim --servername spider --cmd 'let g:user_mode=1'"
export EDITOR="/usr/bin/nvim --cmd 'let g:user_mode=1'"
export TMUX_BIN=/usr/local/bin/tmux

if [ -z "${VIM+x}" ]; then
  export RUN_TMUX=true
  export USE_ATHAME=true
else
  export RUN_TMUX=false
  export USE_ATHAME=false
  export ATHAME_ENABLED=0
  export ATHAME_SHOW_MODE=0
  export ATHAME_VIM_PERSIST=0
fi

unset zle_bracketed_paste
unsetopt share_history


export ZSH=/home/viktor/.oh-my-zsh
ZSH_THEME="vrisk"
plugins=(git)
source $ZSH/oh-my-zsh.sh

killp () {

  if [ $# -eq 0 ]; then
    pes=$( cat ) 
  else
    pes=$1
  fi
  
	for child in $(ps -o pid,ppid -ax | \
   awk "{ if ( \$2 == $pes ) { print \$1 }}")
  do
    # echo "Killing child process $child because ppid = $pes"
    killp $child
  done
        
  # echo "killing $1"
  kill -9 "$1" > /dev/null 2> /dev/null
}

zshexit() {

  echo "T$PPID"

  pids=`tmux list-panes -s -t "T$PPID" -F "#{pane_pid} #{pane_current_command}" | grep -v tmux | awk '{print $1}'`

  echo $pids

  for pid in "$pids"
  do
    killp "$pid"
    echo "killing $pid"
  done

  $TMUX_BIN kill-session -t "T$PPID"
}                                                       

runTmux() {

  SESSION_NAME="T$PPID"

  # try to find session with the correct session id (based on the zsh PID)
  EXISTING_SESSION=`$TMUX_BIN ls 2> /dev/null | grep "$SESSION_NAME" | wc -l` 

  echo $EXISTING_SESSION

  if [ "$EXISTING_SESSION" -gt "0" ]; then

    # if such session exists, attach to it
      # $TMUX_BIN -2 attach-session -t "$SESSION_NAME"

    else

    # if such session does not exist, create it
      $TMUX_BIN new-session -s "$SESSION_NAME"

    fi 

  # hook after exitting the session
  # when the session exists, find a file in /tmp with the name of the session
  # and extract a path from it. Then cd to it.
    FILENAME="/tmp/tmux_restore_path.txt"
    if [ -f $FILENAME ]; then

      MY_PATH=$(tail -n 1 $FILENAME)

      rm /tmp/tmux_restore_path.txt

      cd $MY_PATH

    fi
  }

runVim() {

  { generateTags & disown; } 2> /dev/null

    VIM_CMD=$(echo "$EDITOR ${@}")

  # if the tmux session does not exist, create new and run vim in it
    if [ -z $TMUX ]; then

      SESSION_NAME="T$PPID"

    # if there is a tmux session with the same name as the current bashpid
      num=`$TMUX_BIN ls 2> /dev/null | grep "$SESSION_NAME" | wc -l`
      if [ "$num" -gt "0" ]; then

        ID=`$TMUX_BIN new-window -t "$SESSION_NAME" -a -P`
        sleep 1.0
        $TMUX_BIN send-keys -t $ID "$VIM_CMD" C-m
        $TMUX_BIN -2 attach-session -t "$SESSION_NAME"

      else 

        $TMUX_BIN new-session -s "$SESSION_NAME" -d "$VIM_CMD" \; attach

      fi

    else

      zsh -c "$VIM_CMD"

    fi
 }

# alias tmux=runTmux
alias vim=runVim

alias vimdiff="vim -d"

kzsh() {
  for i in `ps aux | grep "\-[z]sh" | awk '{print $2}'`; do   
    killp "$i"
  done
}

# source tmuxinator
# source $GIT_PATH/linux-setup/submodules/tmuxinator/completion/tmuxinator.zsh

# by default, athame should be off
export ATHAME_ENABLED=0
export ATHAME_SHOW_MODE=0
export ATHAME_VIM_PERSIST=0

# but if we are in tmux launched by the user/terminal (not tmuxinator)
  # and if user want to use athame, use it
    if [ -n "$TMUX" ]; then

      if [ "$USE_ATHAME" = "true" ]; then

        SESSION_NAME=`$TMUX_BIN display-message -p '#S'`

        if [[ $SESSION_NAME =~ ^T[0-9]+$ ]]; then

          export ATHAME_ENABLED=1
          export ATHAME_SHOW_MODE=1
          export ATHAME_VIM_PERSIST=1

        fi
      fi
    fi

# load tmux automatically                                                                             
if [ "$RUN_TMUX" = "true" ]; then
  if command -v $TMUX_BIN>/dev/null; then                                                                    
    if [ ! -z "$PS1" ]; then # unless shell not loaded interactively, run tmux                          
      [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && runTmux                                                  
    fi                                                                                                  
  fi
fi

ros() {
  source /opt/ros/kinetic/setup.zsh
  source ~/workspace/devel/setup.zsh
  source /home/viktor/mrs_workspace/devel/setup.zsh
  source ~/gazebo_plugins/devel/setup.zsh
  source /usr/share/gazebo/setup.sh
  source ~/simulation/install/share/simulation/setup.sh
}  

export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:~/ros_workspace/src/mbzirc/gazebo_support/models:~/gazebo_plugins/models
export GAZEBO_PLUGIN_PATH=$GAZEBO_PLUGIN_PATH:~/gazebo_local_plugins
export UAV_MASS=3.0

export PATH=$PATH:/home/viktor/Matlab/Matlab/bin/glnxa64/
alias mn='MATLAB -nodesktop -nosplash -nojvm'

# OpenCV
PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
export PKG_CONFIG_PATH

alias ei='vim /home/viktor/.i3/config'
alias ..='cd ..'

export CUDA_BIN_PATH=/usr/local/cuda-8.0
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-8.0/bin:/home/viktor
export CUDA_HOME=$CUDA_HOME:/usr/local/cuda-8.0
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-8.0/lib64:/usr/local/lib:/home/viktor/OpenCV/opencv_3_1/installed/lib

set -o vi
# use the vi navigation keys in menu completion
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
alias vimr='vim --remote-silent'


# do you use i3?
  export USE_I3=true

# path to ros workspace
export ROS_WORKSPACE="~/workspace
# ~/mrs_workspace ~/ros_workspace"

# where should ctags look for sources to parse?
  # -R dir1 -R dir2 ...
  export CTAGS_SOURCE_DIR="-R ~/mrs_workspace"

# where should ctags look for sources to parse?
  # CTAGS FROM THOSE FILE WILL BE CREATED ONLY ONCE
  # -R dir1 -R dir2 ...
  export CTAGS_ONCE_SOURCE_DIR="-R /opt/ros/kinetic/include"

# path to the git root
export GIT_PATH=/home/viktor/git


alias vi=vim
#  For a full list of active aliases, run `alias`.
  #
  source ~/.myzshrc
  alias -s cpp=vim

  function w3g { w3m "google.com/search?q=$1" ;}
  function w3w { w3m "https://en.wikipedia.org/w/index.php?search=$1" ;}

  camid=25001879
  mvcamid=mv_25001879

# export PATH=${PATH}:${HOME}/toulouse/openrobots/sbin

############### Robot Package stuff
export ROBOTPKG_BASE=${HOME}/uvdd-research/openrobots
export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:${ROBOTPKG_BASE}/lib/pkgconfig
export PATH=${ROBOTPKG_BASE}/bin:${ROBOTPKG_BASE}/sbin:${ROBOTPKG_BASE}/lib:$PATH
export ROS_PACKAGE_PATH=${ROBOTPKG_BASE}/share:${ROS_PACKAGE_PATH}
# export PYTHONPATH=$PYTHONPATH:${ROBOTPKG_BASE}/lib/python2.7/site-packages
#
alias :q=exit

alias sup=sup-mail


alias zath=zathura

export LESS='-R'
export LESSOPEN='|~/.lessfilter %s'

historyZsh(){
  eval "print $*"
}
alias history=historyZsh

ros

# set +x
#


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
