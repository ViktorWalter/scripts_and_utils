zmodload zsh/zprof
# set -x
# export EDITOR="/usr/bin/vim --servername spider --cmd 'let g:user_mode=1'"
export EDITOR="/usr/bin/nvim --cmd 'let g:user_mode=1'"
export TMUX_BIN=/usr/local/bin/tmux

if [ -z "${VIM+x}" ]; then
  export RUN_TMUX=true
  export USE_ATHAME=true
else
  export RUN_TMUX=false
  export USE_ATHAME=false
fi

unset zle_bracketed_paste
unsetopt share_history

export ZSH=/home/viktor/.oh-my-zsh
ZSH_THEME="vrisk"
plugins=(git ros)
source $ZSH/oh-my-zsh.sh

killp () {

  if [ $# -eq 0 ]; then
    pes=$( cat ) 
  else
    pes=$1
  fi
  
	for child in $(ps -o pid,ppid -ax | \
   awk "{ if ( \$2 == $pes ) { print \$1 }}")
  do
    # echo "Killing child process $child because ppid = $pes"
    killp $child
  done
        
  # echo "killing $1"
  kill -9 "$1" > /dev/null 2> /dev/null
}

zshexit() {

  pwd >> /tmp/tmux_restore_path.txt

  forceKillTmuxSession "T$PPID"
}

runTmux() {

  SESSION_NAME="T$PPID"


  # try to find session with the correct session id (based on the zsh PID)
  EXISTING_SESSION=`$TMUX_BIN ls 2> /dev/null | grep "$SESSION_NAME" | wc -l` 


  echo $EXISTING_SESSION

  if [ "$EXISTING_SESSION" -gt "0" ]; then

    # if such session exists, attach to it
      # $TMUX_BIN -2 attach-session -t "$SESSION_NAME"

    else

    # if such session does not exist, create it
      $TMUX_BIN new-session -s "$SESSION_NAME"

    fi 

  # hook after exitting the session
  # when the session exists, find a file in /tmp with the name of the session
  # and extract a path from it. Then cd to it.
    FILENAME="/tmp/tmux_restore_path.txt"
    if [ -f $FILENAME ]; then

      MY_PATH=$(tail -n 1 $FILENAME)

      rm /tmp/tmux_restore_path.txt

      cd $MY_PATH

    fi
  }

runVim() {

  { generateTags & disown; } 2> /dev/null

    VIM_CMD=$(echo "$EDITOR ${@}")

  # if the tmux session does not exist, create new and run vim in it
    if [ -z $TMUX ]; then

      SESSION_NAME="T$PPID"

    # if there is a tmux session with the same name as the current bashpid
      num=`$TMUX_BIN ls 2> /dev/null | grep "$SESSION_NAME" | wc -l`
      if [ "$num" -gt "0" ]; then

        ID=`$TMUX_BIN new-window -t "$SESSION_NAME" -a -P`
        sleep 1.0
        $TMUX_BIN send-keys -t $ID "$VIM_CMD" C-m
        $TMUX_BIN -2 attach-session -t "$SESSION_NAME"

      else 

        $TMUX_BIN new-session -s "$SESSION_NAME" -d "$VIM_CMD" \; attach

      fi

    else

      zsh -c "$VIM_CMD"

    fi
 }

# alias tmux=runTmux
alias vim=runVim

alias vimdiff="nvim -d"

kzsh() {
  for i in `ps aux | grep "\-[z]sh" | awk '{print $2}'`; do   
    killp "$i"
  done
}

# source tmuxinator
# source $GIT_PATH/linux-setup/submodules/tmuxinator/completion/tmuxinator.zsh

# by default, athame should be off
export ATHAME_ENABLED=0
export ATHAME_SHOW_MODE=0
export ATHAME_VIM_PERSIST=0

if [ "$USE_ATHAME" = "true" ]; then

  SESSION_NAME=`$TMUX_BIN display-message -p '#S'`

  export ATHAME_ENABLED=1
  export ATHAME_SHOW_MODE=1
  export ATHAME_VIM_PERSIST=0
fi

# load tmux automatically                                                                             
if [ "$RUN_TMUX" = "true" ]; then
  if command -v $TMUX_BIN>/dev/null; then                                                                    
    if [ ! -z "$PS1" ]; then # unless shell not loaded interactively, run tmux                          
      [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && runTmux                                                  
    fi                                                                                                  
  fi
fi

ros() {
  source /opt/ros/noetic/setup.zsh
  # source /home/viktor/workspace/devel/setup.zsh
  # source /home/viktor/swarm_workspace/devel/setup.zsh
  source /home/viktor/mrs_workspace/devel/setup.zsh
  source /usr/share/gazebo/setup.sh
  # source ~/simulation/install/share/simulation/setup.sh
  # source ~/gazebo_plugins/devel/setup.zsh
  # source ~/balloon_workspace/devel/setup.zsh

  # export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:~/mrs_workspace/src/mbzirc/gazebo_support/models
  # export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:~/mrs_workspace/src/mbzirc/gazebo_support/models:~/gazebo_plugins/models
  export GAZEBO_PLUGIN_PATH=$GAZEBO_PLUGIN_PATH:~/gazebo_local_plugins
  export UAV_MASS=3.0
  # path to ros workspace
  export ROS_WORKSPACE="~/workspace ~/mrs_workspace"
  # ~/mrs_workspace ~/ros_workspace"
  # where should ctags look for sources to parse?
  # -R dir1 -R dir2 ...
  export CTAGS_SOURCE_DIR="-R ~/workspace -R ~/mrs_workspace"
  # where should ctags look for sources to parse?
  # CTAGS FROM THOSE FILE WILL BE CREATED ONLY ONCE
  # -R dir1 -R dir2 ...
  export CTAGS_ONCE_SOURCE_DIR="-R /opt/ros/noetic/include"


}  

ros_path(){
_ros_decode_path $1 forceeval
echo ${rosvals[2]}
}


export PATH=$PATH:/home/viktor/Matlab/Matlab/bin/glnxa64/
alias mn='MATLAB -nodesktop -nosplash'

# OpenCV
PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
export PKG_CONFIG_PATH

alias ei='vim /home/viktor/.i3/config'
alias ..='cd ..'

export CUDA_BIN_PATH=/usr/local/cuda-9.2
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin
export CUDA_HOME=$CUDA_HOME:/usr/local/cuda-9.2
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.2/lib64:/usr/local/lib:/home/viktor/OpenCV/opencv_3_1/installed/lib

set -o vi
# use the vi navigation keys in menu completion
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
alias vimr='vim --remote-silent'


# do you use i3?
  export USE_I3=true



# path to the git root
export GIT_PATH=/home/viktor/git


alias vi=vim
#  For a full list of active aliases, run `alias`.
  #
  alias -s cpp=vim

  function w3g { w3m "google.com/search?q=$1" ;}
  function w3w { w3m "https://en.wikipedia.org/w/index.php?search=$1" ;}

  camid=25001879
  mvcamid=mv_25001879

# export PATH=${PATH}:${HOME}/toulouse/openrobots/sbin

# ############### Robot Package stuff
# export ROBOTPKG_BASE=${HOME}/uvdd-research/openrobots
# export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:${ROBOTPKG_BASE}/lib/pkgconfig
# export PATH=${ROBOTPKG_BASE}/bin:${ROBOTPKG_BASE}/sbin:${ROBOTPKG_BASE}/lib:$PATH
# export ROS_PACKAGE_PATH=${ROBOTPKG_BASE}/share:${ROS_PACKAGE_PATH}
# # export PYTHONPATH=$PYTHONPATH:${ROBOTPKG_BASE}/lib/python2.7/site-packages
#
alias :q=exit

# alias sup=sup-mail


alias zath=zathura

export LESS='-R'
export LESSOPEN='|~/.lessfilter %s'

historyZsh(){

  eval 'print $@'
}
alias history='historyZsh'

# ros

# set +x
#


export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# TERM=xterm-256color

# alias cdphone='. ~/cdphone'

# export RUBYOPT="-W0"; rails server
#
export NO_AT_BRIDGE=1

export PROFILES_ADDITIONS=""
export PROFILES_DELETIONS=""
export PROFILES_BOTH="VIKTOR_THINKPAD COLORSCHEME_DARK"


# upgrades the "git pull" to allow dotfiles profiling on linux-setup
# Other "git" features should not be changed
git() {

    case $* in pull*|checkout*|"reset --hard")

    # give me the path to root of the repo we are in
    ROOT_DIR=`git rev-parse --show-toplevel` 2> /dev/null

    if [[ "$?" == "0" ]]; then

      # if we are in the 'linux-setup' repo, use the Profile manager
      if [[ "$ROOT_DIR" == "$GIT_PATH/linux-setup-clean" ]]; then

        PROFILE_MANAGER="$GIT_PATH/linux-setup/submodules/profile_manager/profile_manager.sh"

        bash -c "$PROFILE_MANAGER backup /home/viktor/.i3/file_lists.txt"

        command git "$@"

        case $* in pull*|checkout*)
          echo "Updating git submodules"
          command git submodule update --init --recursive
        esac

        if [[ "$?" == "0" ]]; then

          bash -c "$PROFILE_MANAGER deploy /home/viktor/.i3/file_lists.txt"

        fi

      else
        command git "$@"
        case $* in pull*|checkout*)
          echo "Updating git submodules"
          command git submodule update --init --recursive
        esac
      fi

    else
      command git "$@"
      case $* in pull*|checkout*)
        echo "Updating git submodules"
        command git submodule update --init --recursive
      esac
    fi

    ;;
  *)
    command git "$@"
    ;;

  esac
}

export GOPATH=~/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

export PATH=$PATH:/home/viktor/localpath/

source ~/git/linux-setup/appconfig/shell/commons.sh
source ~/mrs_workspace/src/uav_core/miscellaneous/shell_additions/shell_additions.sh
ros

alias vpn=nordvpn
alias sup='RUBYOPT="-W0" sup'

export BLUEFOX_UV=25002534
export BLUEFOX=26805883

# export BLUEFOX_UV_RIGHT=25003660
# export BLUEFOX_UV_LEFT=25003661

# export BLUEFOX_UV_RIGHT_EXPOSE_US=1000
# export BLUEFOX_UV_LEFT_EXPOSE_US=2000

# export UAV_NAME=uav1
# export NATO_NAME=quebec

# export BLUEFOX_UV_RIGHT=25003618
# export BLUEFOX_UV_LEFT=25003633

# export BLUEFOX_UV_RIGHT_EXPOSE_US=1000
# export BLUEFOX_UV_LEFT_EXPOSE_US=2000

# export UAV_NAME=uav50
# export NATO_NAME=sierra
# export BLUEFOX_UV_LEFT=25003696
# export BLUEFOX_UV_RIGHT=25003668

# export UAV_NAME=uav42
# export NATO_NAME=uniform
# export BLUEFOX_UV_LEFT=25003653
# export BLUEFOX_UV_RIGHT=25003655

# export UAV_NAME=uav51
# export NATO_NAME=tango
# export BLUEFOX_UV_LEFT=25003689
# export BLUEFOX_UV_RIGHT=25003671

# export BLUEFOX_UV_RIGHT=25003678
# export BLUEFOX_UV_LEFT=25003649

# export BLUEFOX_UV_RIGHT_EXPOSE_US=2000
# export BLUEFOX_UV_LEFT_EXPOSE_US=2000

# export UAV_NAME=uav45
# export NATO_NAME=papa

# export BLUEFOX_UV_RIGHT=25003654
# export BLUEFOX_UV_LEFT=25003657

# export BLUEFOX_UV_RIGHT=25003654
export BLUEFOX_UV_LEFT=25003650
#
export BLUEFOX_UV_RIGHT_EXPOSE_US=1000
export BLUEFOX_UV_LEFT_EXPOSE_US=500

# export UAV_NAME=uav49
# export NATO_NAME=romeo

export ROS_MATER_URI=http://localhost:11311
# export ROS_MASTER_URI=http://localhost:11311
# export ROS_MASTER_URI=http://192.168.69.166:11311 #golf
# export ROS_MASTER_URI=http://192.168.69.142:11311
# export ROS_MASTER_URI=http://192.168.69.142:11311 #uniform
# export ROS_MASTER_URI=http://192.168.69.151:11311 #tango
# export ROS_MASTER_URI=http://192.168.69.150:11311 #sierra
# export ROS_MASTER_URI=http://192.168.69.147:11311 #quebec
# export ROS_MASTER_URI=http://192.168.69.153:11311 #victor
# export ROS_MASTER_URI=http://quebec:11311
# export ROS_MASTER_URI=http://oscar:11311
# export ROS_MASTER_URI=http://papa:11311
# export ROS_MASTER_URI=http://victor:11311
# export ROS_MASTER_URI=http://romeo:11311
# export ROS_MASTER_URI=http://10.201.1.166:11311
# export ROS_MASTER_URI=http://10.201.1.167:11311
# export ROS_MASTER_URI=http://uav50:11311
# export ROS_MASTER_URI=http://10.201.1.171:11311
# export ROS_MASTER_URI=http://10.201.1.168:11311
# export ROS_MASTER_URI=http://10.201.1.166:11311
# export ROS_IP=10.10.20.188
# export ROS_IP=192.168.69.7
export pdftk='java -jar ~/git/pdftk/build/jar/pdftk.jar --help'
alias hamachi="sudo hamachi"

# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

alias ssh-add="source ssh-add-identity.sh"
ssh-add > /dev/null 2>&1

gitcd() {
  cd ~/git/$1
}

export TEST=true
export UAV_MASS="3.0" # [kg], used only with real UAV
export RUN_TYPE="simulation" # {simulation, uav}
export UAV_TYPE="f450" # {f550, f450, t650, eagle, naki}
export PROPULSION_TYPE="default" # {default, new_esc, ...}
export ODOMETRY_TYPE="gps" # {gps, optflow, hector, vio, ...}
export INITIAL_DISTURBANCE_X="0.0" # [N], external disturbance in the body frame
export INITIAL_DISTURBANCE_Y="0.0" # [N], external disturbance in the body frame
export STANDALONE="false" # disables the core nodelete manager
export SWAP_GARMINS="false" # swap up/down garmins
export SENSORS="trinocular_thermal" # {garmin_down, garmin_up, rplidar, realsense_front, teraranger, bluefox_optflow}
export WORLD_NAME="simulation"
export PIXGARM="false" # true if Garmin lidar is connected throught Pixhawk
export MRS_STATUS="readme" # {readme, dynamics, balloon, avoidance, control_error, gripper}
export LOGGER_DEBUG="false" # sets the ros console output level to debug

echo "TODO:"
cat ~/todo.txt | grep -v "#"

export ca='--color=always'

shit() {
  n=$(( `tput cols` / 30 ))
  echo $n
  shitstring=""
  for i in {1..$n}; do
    shitstrings="${shitstrings}SHIT "
  done
  yes $shitstrings | toilet --gay -f big -t
}

# cbl() {
#   if [ $# -eq 0 ]; then
#     package=--this
#   else
#     cd ~/mrs_workspace
#     package=$1
#   fi
#   catkin build $package --force-color 2>&1 | less -r
# }
export GOPATH=~/go
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/bin:/bin
alias matlab='~/MATLAB/bin/matlab'
alias MATLAB='~/MATLAB/bin/matlab'
export UAV_NAME="uav1" 
export NATO_NAME="" # lower-case name of the UAV frame {alpha, bravo, charlie, ...}

alias ffs='sudo !!'
export GOPATH=~/go
export PATH=/opt/ros/noetic/bin:/home/viktor/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/bin:/home/viktor/go/bin:/home/viktor/localpath/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/home/viktor/Matlab/Matlab/bin/glnxa64/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/cuda-9.2/bin:/bin:/bin:/bin:/home/viktor/go/bin
