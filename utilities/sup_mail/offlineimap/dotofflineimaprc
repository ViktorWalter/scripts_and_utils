[general]
pythonfile = ~/.offlineimap.py
# List of accounts to be synced, separated by a comma.
accounts = fel,fel_x,outlook,gmail,disroot
# accounts = outlook,gmail
ui = ttyui

[Account fel]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = fel-local
# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = fel-remote


[Repository fel-local]
# OfflineIMAP supports Maildir, GmailMaildir, and IMAP for local repositories.
type = Maildir
# Where should the mail be placed?
localfolders = ~/mail/fel
nametrans = lambda folder: {'inbox': 'INBOX',
                            }.get(folder, folder)

[Repository fel-remote]
# Remote repos can be IMAP or Gmail, the latter being a preconfigured IMAP.
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
type = IMAP
remotehost = imap.feld.cvut.cz
remoteuser = waltevik
remotepasseval = keyring.get_password('fel', 'personal')
nametrans = lambda folder: {'INBOX': 'inbox',
                            }.get(folder, folder)
folderfilter = lambda folder: folder == 'INBOX'

[Account fel_x]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = fel_x-local
# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = fel_x-remote


[Repository fel_x-local]
# OfflineIMAP supports Maildir, GmailMaildir, and IMAP for local repositories.
type = Maildir
# Where should the mail be placed?
localfolders = ~/mail/fel_x
nametrans = lambda folder: {'inbox': 'INBOX',
                            }.get(folder, folder)

[Repository fel_x-remote]
# Remote repos can be IMAP or Gmail, the latter being a preconfigured IMAP.
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
type = IMAP
remotehost = outlook.office365.com
remoteuser = Viktor.Walter@cvut.cz
remotepasseval = keyring.get_password('fel_x', 'personal')
nametrans = lambda folder: {'INBOX': 'inbox',
                            }.get(folder, folder)
folderfilter = lambda folder: folder == 'INBOX'

[Account outlook]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = outlook-local
# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = outlook-remote


[Repository outlook-local]
# OfflineIMAP supports Maildir, GmailMaildir, and IMAP for local repositories.
type = Maildir
# Where should the mail be placed?
localfolders = ~/mail/outlook
nametrans = lambda foldername: re.sub('inbox', 'Inbox',
                               re.sub('inbox_oj','Junk',
                               foldername))

[Repository outlook-remote]
# Remote repos can be IMAP or Gmail, the latter being a preconfigured IMAP.
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
type = IMAP
remotehost = imap-mail.outlook.com
remoteuser = viktor_walter@outlook.com
remotepasseval = keyring.get_password('outlook', 'personal')
nametrans = lambda foldername: re.sub('Inbox', 'inbox',
                               re.sub('Junk','inbox_oj',
                               foldername))
folderfilter = lambda foldername: foldername in ['Inbox', 'Junk']

[Account gmail]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = gmail-local
# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = gmail-remote


[Repository gmail-local]
# OfflineIMAP supports Maildir, GmailMaildir, and IMAP for local repositories.
type = Maildir
# Where should the mail be placed?
localfolders = ~/mail/gmail
nametrans = lambda folder: {'inbox': 'INBOX',
                            }.get(folder, folder)

[Repository gmail-remote]
auth_mechanisms = XOAUTH2
oauth2_client_id_eval = keyring.get_password('gmail_client_id', 'personal')
oauth2_client_secret_eval = keyring.get_password('gmail_client_secret', 'personal')
oauth2_request_url = https://accounts.google.com/o/oauth2/token
oauth2_refresh_token_eval = keyring.get_password('gmail_refresh_token', 'personal')
# get_refresh_token("CiernoBiely@gmail.com")
# Remote repos can be IMAP or Gmail, the latter being a preconfigured IMAP.
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
# Necessary to work around https://github.com/OfflineIMAP/offlineimap/issues/573 (versions 7.0.12, 7.2.1)
ssl_version = tls1_2
type = Gmail
remotehost = imap.gmail.com
remoteuser = CiernoBiely@gmail.com
remotepasseval = keyring.get_password('gmail', 'personal')
nametrans = lambda folder: {'INBOX': 'inbox',
                            }.get(folder, folder)
folderfilter = lambda folder: folder == 'INBOX'


[Account disroot]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = disroot-local
# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = disroot-remote


[Repository disroot-local]
# OfflineIMAP supports Maildir, GmailMaildir, and IMAP for local repositories.
type = Maildir
# Where should the mail be placed?
localfolders = ~/mail/disroot
nametrans = lambda folder: {'inbox': 'INBOX',
                            'junk': 'Junk',
                            }.get(folder, folder)

[Repository disroot-remote]
# Remote repos can be IMAP or Gmail, the latter being a preconfigured IMAP.
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
type = IMAP
remotehost = disroot.org
remoteuser = viktor.walter
remotepasseval = keyring.get_password('disroot', 'personal')
nametrans = lambda foldername: re.sub('INBOX', 'inbox',
                               re.sub('Junk','junk',
                               foldername))
folderfilter = lambda foldername: foldername in ['INBOX','Junk']
# [Account laas]
# localrepository = laas-local
# remoterepository = laas-remote

# [Repository laas-local]
# type = Maildir
# localfolders = ~/mail/laas
# nametrans = lambda folder: {'inbox': 'INBOX',
#                             }.get(folder, folder)

# [Repository laas-remote]
# sslcacertfile = /etc/ssl/certs/ca-certificates.crt
# type = IMAP
# remotehost = imap.laas.fr
# remoteuser = vwalter
# remotepasseval = keyring.get_password('laas', 'personal')
# nametrans = lambda folder: {'INBOX': 'inbox',
#                             }.get(folder, folder)
# folderfilter = lambda folder: folder == 'INBOX'
